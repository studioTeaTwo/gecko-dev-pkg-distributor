# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Please write our copyright if you use this file.
# ¬© 2023 Floorp Projects & Contributors

#! SELF HOST DOES NOT SUPPORTED
#TODO: separate Publish to other workflow

#! aarch64 PGO can maybe not comportable with pgo
# name: Windows Build
# description: Action of Floorp Windows build (x64)

on:
  workflow_call:
    inputs:
      profgen:
        description: generate profile for PGO.
        type: boolean
        default: false
      aarch64:
        description: enable aarch64 build
        type: boolean
        default: false
      zstd:
        description: enable artifact as zstd fmt
        type: boolean
        default: false
      #! does not compartible with aarch64
      #? maybe light change needed to fix
      mar:
        type: boolean
        default: false
      #? if set this, use profdata, jarlog in build
      profdata_jarlog_artifact_name:
        description: profile artifact name;use profile for PGO;not compartible with profgen
        type: string
        default: ""
      out_artifact_name:
        type: string
        default: ""
      display_version:
        type: string
        default: ""
      MOZ_BUILD_DATE:
        type: string
        default: ""
    secrets:
      PAT:
        description: "Personal Access Token"
        required: true
jobs:
  win-build:
    runs-on: ubuntu-latest
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "lts/*"
    - name: Check Argument Compatibility
      shell: node {0}
      run: |
        //profgen and use-profdata is not compatible
        if (
          process.env.GHA_profgen == "true"
          && process.env.GHA_profdata_jarlog_artifact_name != ""
        ) {process.exit(-1);}

        //aarch64 and (profgen or profdata_jarlog_artifact_name) is not compatible
        if (
          process.env.GHA_aarch64 == "true"
          && (
            process.env.GHA_profgen == "true"
            || process.env.GHA_profdata_jarlog_artifact_name != ""
          )
        ) {process.exit(-1);}

        // aarch64 is not compatible
        if (
          process.env.GHA_aarch64 == "true"
        ) {process.exit(-1);}
      env:
        GHA_profgen: ${{inputs.profgen}}
        GHA_aarch64: ${{inputs.aarch64}}
        GHA_zstd: ${{inputs.zstd}}
        GHA_mar: ${{inputs.mar}}
        GHA_profdata_jarlog_artifact_name: ${{inputs.profdata_jarlog_artifact_name}}
        GHA_out-artifact-name: ${{inputs.out_artifact_name}}

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update

    - uses: actions/checkout@v4
      name: Clone üß¨
      with:
        submodules: 'recursive'
        token: ${{ secrets.PAT }}

    - name: Setup Disk & Swap Space üíø
      run: |
        chmod +x .github/workflows/src/disk_swap_for_github_runner.sh
        .github/workflows/src/disk_swap_for_github_runner.sh

    - name: Configure sccache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - uses: actions/download-artifact@v4
      name: Download artifact if use profdataüì•
      if: inputs.profdata_jarlog_artifact_name
      with:
        name: ${{inputs.profdata_jarlog_artifact_name}}
        path: ~/artifact

    - name: Setup ü™õ
      run: |
        mkdir -p ~/win-cross

        if [[ $GHA_aarch64 == 'true' ]]; then
          cp ./.github/workflows/src/windows/aarch64/mozconfig_win_aarch64_pgo_base mozconfig
        else
          cp ./.github/workflows/src/windows/x86_64/mozconfig_win_x86_64_pgo_base mozconfig
        fi

        if [[ -n $GHA_MOZ_BUILD_DATE ]];then
          export MOZ_BUILD_DATE=$GHA_MOZ_BUILD_DATE
        fi

        echo 'ac_add_options --with-branding=browser/branding/unofficial' >> mozconfig

        if [[ $GHA_profgen == 'true' ]]; then
          echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig
        elif [[ -n $GHA_profdata_jarlog_artifact_name ]]; then
          {
            echo 'ac_add_options --enable-profile-use=cross'
            echo "ac_add_options --with-pgo-profile-path=$HOME/artifact/merged.profdata"
            echo "ac_add_options --with-pgo-jarlog=$HOME/artifact/en-US.log"
          } >> mozconfig
        fi

        # SCCACHE START
        {
          echo "mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'"
          echo "mk_add_options 'export CCACHE_CPP2=yes'"
          echo 'ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache'
          echo "mk_add_options 'export SCCACHE_GHA_ENABLED=on'"
        } >> mozconfig
        # SCCACHE END

        echo Setup wine
        aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-1.toolchains.v3.linux64-wine.latest/artifacts/public%2Fbuild%2Fwine.tar.zst" -o wine.tar.zst
        tar --zstd -xvf wine.tar.zst -C ~/win-cross
        rm wine.tar.zst

        echo Setup Visual Studio
        sudo apt install -y msitools python3-pip
        ./mach python --virtualenv build taskcluster/scripts/misc/get_vs.py build/vs/vs2022.yaml ~/win-cross/vs2022
        chmod -R +x "$HOME/win-cross/vs2022"
        #? from daily-build-with-update
        #? for resolve some problems relate to VCRuntime
        #? from end

        ./mach --no-interactive bootstrap --application-choice browser
        echo "export LIB=\"$(cd ~/.mozbuild/clang/lib/clang/* && cd lib/windows && pwd)\"" >> mozconfig

        echo "UPDATE_CHANNEL=release" >> "$GITHUB_ENV"
      env:
        GHA_profgen: ${{inputs.profgen}}
        GHA_aarch64: ${{inputs.aarch64}}
        GHA_profdata_jarlog_artifact_name : ${{inputs.profdata_jarlog_artifact_name}}
        GHA_MOZ_BUILD_DATE: ${{inputs.MOZ_BUILD_DATE}}

    - name: setup Rust ü¶Ä
      run: |
        rustup toolchain install 1.81.0
        rustup default 1.81.0

        if [[ $GHA_aarch64 == 'true' ]];then
          rustup target add aarch64-pc-windows-msvc --toolchain 1.81.0
        else
          rustup target add x86_64-pc-windows-msvc --toolchain 1.81.0
        fi

        #? https://github.com/mozilla/sccache#known-caveats
        export CARGO_INCREMENTAL=0
      env:
        GHA_aarch64: ${{inputs.aarch64}}

    - name: Build üî®
      continue-on-error: true
      run: |
        if [[ -n $GHA_MOZ_BUILD_DATE ]];then
          export MOZ_BUILD_DATE=$GHA_MOZ_BUILD_DATE
        fi

        ./mach build
      env:
        GHA_MOZ_BUILD_DATE: ${{inputs.MOZ_BUILD_DATE}}

    - name: Retry Build if 1st build is failed üî®
      if: failure()
      run: |
        if [[ -n $GHA_MOZ_BUILD_DATE ]];then
          export MOZ_BUILD_DATE=$GHA_MOZ_BUILD_DATE
        fi

        ./mach build
      env:
        GHA_MOZ_BUILD_DATE: ${{inputs.MOZ_BUILD_DATE}}

    - name: Package üì¶
      run: |
        if [[ -n $GHA_MOZ_BUILD_DATE ]];then
          export MOZ_BUILD_DATE=$GHA_MOZ_BUILD_DATE
        fi
        ./mach package
        ./mach build

      env:
        GHA_MOZ_BUILD_DATE: ${{inputs.MOZ_BUILD_DATE}}

    - name: Copy üìÇ
      run: |
        mkdir ~/output
        if [[ $GHA_aarch64 == 'true' ]];then
          arch='aarch64'
          arch_inst='win64-aarch64'
        else
          arch='x86_64'
          arch_inst='win64'
        fi

        if [[ $GHA_zstd != 'true' ]];then
          cp obj-${arch}-pc-windows-msvc/dist/install/sea/ssb-*.en-US.${arch_inst}.installer-stub.exe ~/output/ssb-stub.installer.exe
          cp obj-${arch}-pc-windows-msvc/dist/ssb-*.en-US.${arch_inst}.zip ~/output/
          cp obj-${arch}-pc-windows-msvc/dist/install/sea/ssb-*.en-US.${arch_inst}.installer.exe ~/output/ssb-${GHA_display_version}.${arch_inst}.installer.exe
        else
          cp obj-${arch}-pc-windows-msvc/dist/ssb-*.en-US.${arch_inst}.zip ~/output/
          7z x ~/output/ssb-*.en-US.${arch_inst}.zip
          tar -I "zstd -T4 -10" --remove-files -cvf ~/output/ssb-${GHA_display_version}.en-us.${arch_inst}.tar.zst ssb
          rm ~/output/ssb-*.en-US.${arch_inst}.zip
        fi
        #? Original code used in daily b with update
        # cp -r obj-x86_64-pc-mingw32/dist/ssb ~/output/
      env:
        GHA_aarch64: ${{inputs.aarch64}}
        GHA_zstd: ${{inputs.zstd}}
        GHA_display_version: ${{inputs.display_version}}

    - name: Create MAR artifact üì¶
      id: gen-mar
      if : inputs.mar
      run: |
        if [[ $GHA_aarch64 == 'true' ]];then
          arch='aarch64'
        else
          arch='x86_64'
        fi

        touch obj-${arch}-pc-windows-msvc/dist/ssb/precomplete
        MAR=obj-${arch}-pc-windows-msvc/dist/host/bin/mar \
        MOZ_PRODUCT_VERSION=$(cat browser/config/version_display.txt) \
        MAR_CHANNEL_ID='release' \
        ./tools/update-packaging/make_full_update.sh ~/output obj-${arch}-pc-windows-msvc/dist/ssb

        mv ~/output/*.mar ~/output/WINNT-${arch}.mar

    # Publish START
    - name: make name of publish archive
      shell: node {0}
      run: |
        const fs = require('fs');
        let name = process.env.GHA_out_artifact_name ? process.env.GHA_out_artifact_name : process.env.GHA_default_name
        fs.appendFileSync(process.env.GITHUB_ENV, `ARTIFACT_NAME=${name}`);
      env:
        GHA_out_artifact_name : ${{inputs.out_artifact_name}}
        GHA_default_name: ssb-windows-${{fromJson('["x86","aarch"]')[inputs.aarch64]}}_64-${{fromJson('["package","build-with-profgen"]')[inputs.profgen]}}${{fromJson('["","-zstd"]')[inputs.zstd]}}

    - name: Publish PackageüéÅ
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: ~/output
    # Publish END
