/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


#include "nsISupports.idl"

/**
 * An object containing information for a credential in the selfsovereignidentity
 */
[scriptable, uuid(009816B6-C67F-405A-ABEB-861B19D8DFEA)]
interface nsICredentialInfo : nsISupports {

  /**
   * The freedom tech protocol name,
   * money, e.g. "bitcoin", "lightning", "liquid", "chashu", "fedimint"...
   * identity, e.g. "nostr", "did:dht"...
   * speech, e.g. "matrix", "signal"...
   */
  attribute AString protocolName;

  /**
   * The credential category for when there are multiple types of the same protocol.
   * e.g. "bip39", "lnc", "nsec"...
   */
  attribute AString credentialName;

  /**
   * If true, this credential has the highest priority within the same
   * protocol, such as when inserted into a window object.
   */
  attribute boolean primary;

  /**
   * The cryptographic secret that is expected to be unique in the world.
   * e.g. secret key, seed phrase....
   * It can also provides a unique key, but the same secret can be used across protocols
   * like between Bitcoin and Nostr. So, GUID or `protocolName + credentialName + secret`
   * should be used as unique key in the system.
   */
  attribute AString secret;

  /**
   * The identifier that identifies the user to others.
   * e.g. public key, user id, email, etc.
   *
   * @note optional
   */
  attribute AString identifier;

  /**
   * A box where you can freely put anything else you need for each credential.
   * Actually string generated by JSON.stringify.
   * e.g. '{"serverHost":"mail.box.lightning.today:443","localKey":"abc...","remoteKey":"xyz..."}'
   *
   * @note optional
   */
  attribute AString properties;

  /**
   * Unknown fields this client doesn't know about but will be roundtripped
   * for other clients to prevent data loss
   *
   * @note optional
   */
  attribute AString unknownFields;

  /**
   * Initialize a newly created nsICredentialInfo object.
   *
   * The arguments are the fields for the new object.
   */
  void init(in AString aProtocolName, in AString aCredentialName,
            in boolean aPrimary, in AString aSecret,
            [optional] in AString aIdentifier,
            [optional] in AString aProperties);

  /**
   * Test for strict equality with another nsICredentialInfo object.
   *
   * @param aCredential
   *        The other object to test.
   */
  boolean equals(in nsICredentialInfo aCredential);

  /**
   * Test for loose equivalency with another nsICredentialInfo object.
   *
   * @param aCredentialInfo
   *        The other object to test.
   */
  boolean matches(in nsICredentialInfo aCredential);

  /**
   * Create an identical copy of the credential, duplicating all of the credential's
   * nsICredentialInfo and nsICredentialMetaInfo properties.
   *
   * This allows code to be forwards-compatible, when additional properties
   * are added to nsICredentialMetaInfo (or nsICredentialInfo) in the future.
   */
  nsICredentialInfo clone();
};

%{C++

#define NS_CREDENTIALINFO_CONTRACTID "@mozilla.org/ssi/credentialInfo;1"

%}
